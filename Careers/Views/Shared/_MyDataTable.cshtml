@using System.Linq
@using Mvc.JQuery.DataTables
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@model DataTableConfigVm

<table id="@Model.Id" class="display @(Model.TableClass ?? DataTableConfigVm.DefaultTableClass ?? "")" @Html.Raw(Model.FixedLayout ? "style='table-layout:fixed'":"")>
    <thead>
        @if (Model.UseColumnFilterPlugin)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.DisplayName</th>
                }
            </tr>
        }
        @if (!Model.HideHeaders)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th class="@column.CssClassHeader">@column.DisplayName</th>
                }
            </tr>
        }
    </thead>
    <tbody>
        <tr>
            <td colspan="@Model.Columns.Count()" class="dataTables_empty">Cargando datos del servidor</td>
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    (function setDataTable() {
        if (!window.jQuery || !$.fn.DataTable) {
            setTimeout(setDataTable, 200);
            return;
        }
        var $table = $('#@Model.Id');

        @{
            var options = new JObject();
            options["aaSorting"] = new JRaw(Model.ColumnSortingString);
            options["bProcessing"] = true;
            options["bStateSave"] = Model.StateSave;
            options["stateDuration"] = -1; // localStorage: 0; sessionStorage: -1
            options["bServerSide"] = true;
            options["bFilter"] = Model.Filter;
            options["sDom"] = Model.Dom;
            if (Model.LengthMenu != null)
            {
                options["lengthMenu"] = new JRaw(Model.LengthMenu);
            }
            if (Model.PageLength.HasValue)
            {
                options["pageLength"] = Model.PageLength;
            }
            options["bAutoWidth"] = Model.AutoWidth;
            options["sAjaxSource"] = Model.AjaxUrl;
            if (Model.TableTools)
            {
                options["oTableTools"] = new JRaw("{ 'sSwfPath': '//cdn.datatables.net/tabletools/2.2.1/swf/copy_csv_xls_pdf.swf' }");
            }
            options["fnServerData"] = new JRaw(
                "function(sSource, aoData, fnCallback) { " +
                "    var ajaxOptions = { 'dataType': 'json', 'type': 'POST', 'url': sSource, 'data': aoData, 'success': fnCallback }; " +
                (Model.AjaxErrorHandler == null ? "" : ("ajaxOptions['error'] = showError") + "; ") +
                "    $.ajax(ajaxOptions);" +
                "}");

            // Search on Enter
            options["initComplete"] = new JRaw(
                "function() {" +
                "var api = this.api();" +
                "$('#" + @Model.Id + "_filter input').off('.DT')" +
                ".on('keyup.DT', function(e) {" +
                " if( e.keyCode === 13 || this.value == '') { api.search(this.value).draw(); }" +
                "});" +
                "}"
                );

            options["aoColumnDefs"] = new JRaw(Model.ColumnDefsString);
            options["aoSearchCols"] = Model.SearchCols;
            if (Model.JsOptions.Any())
            {
                foreach (var jsOption in Model.JsOptions)
                {
                    options[jsOption.Key] = new JRaw(jsOption.Value);
                }
            }
            // Set default language
            options["oLanguage"] = new JRaw("{ 'sUrl': '" + Url.Content("~/Content/spanish.json") + "' }");
            //if (!string.IsNullOrWhiteSpace(Model.Language))
            //{
            //    options["oLanguage"] = new JRaw(Model.Language);
            //}
            if (!string.IsNullOrWhiteSpace(Model.DrawCallback))
            {
                options["fnDrawCallback"] = new JRaw(Model.DrawCallback);
            }

            }
        
        var dt = $table.dataTable(@Html.Raw(options.ToString(Formatting.Indented)));
        @if (Model.UseColumnFilterPlugin)
        {
            var colFilter = "dt.columnFilter(" + Model.ColumnFilterVm + ");";
            colFilter = colFilter.Replace("{\"values\":[\"True\",\"False\"],\"type\":\"select\"}", "{ \"values\": [{\"value\":\"True\", \"label\":\"SI\"}, {\"value\":\"False\", \"label\":\"NO\"}], \"type\": \"select\" }");
            colFilter = colFilter.Replace("{\"type\":\"select\",\"values\":[\"True\",\"False\"]}", "{ \"values\": [{\"value\":\"True\", \"label\":\"SI\"}, {\"value\":\"False\", \"label\":\"NO\"}], \"type\": \"select\" }");
            
            @Html.Raw(colFilter)
        }

        @if (Model.GlobalJsVariableName != null)
        {
            @Html.Raw("window['" + Model.GlobalJsVariableName + "'] = dt;")
        }

        $.datepicker.regional['es'] = {
            closeText: 'Cerrar',
            prevText: '&#x3C;Ant',
            nextText: 'Sig&#x3E;',
            currentText: 'Hoy',
            monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
            'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
            dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
            dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Juv', 'Vie', 'Sáb'],
            dayNamesMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
            weekHeader: 'Sm',
            dateFormat: 'dd/mm/yy',
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ''
        };
        $.datepicker.setDefaults($.datepicker.regional['es']);

    })();
</script>